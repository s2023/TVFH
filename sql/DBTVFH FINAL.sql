-- MySQL Script generated by MySQL Workbench
-- Mon Nov 21 00:25:23 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema DBTVFH
-- -----------------------------------------------------
-- Base de datos de la Tienda Virtual Florideas Holanda (DBTVFH).

-- -----------------------------------------------------
-- Schema DBTVFH
--
-- Base de datos de la Tienda Virtual Florideas Holanda (DBTVFH).
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `DBTVFH` DEFAULT CHARACTER SET utf8 COLLATE utf8_spanish_ci ;
USE `DBTVFH` ;

-- -----------------------------------------------------
-- Table `DBTVFH`.`TblEstadoUsuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`TblEstadoUsuario` (
  `idEstadoUsuario` INT(15) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave Primaria. Identificador único del estado de usuario registrado en la tienda.',
  `nombreEstadoUsuario` VARCHAR(30) NOT NULL COMMENT 'Estado actual del usuario: Activado, Desactivado, Eliminado.',
  PRIMARY KEY (`idEstadoUsuario`))
ENGINE = InnoDB
COMMENT = 'Se usa para almacenar los datos del estado del usuario.';


-- -----------------------------------------------------
-- Table `DBTVFH`.`TblTipoDocumento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`TblTipoDocumento` (
  `idTipoDocumento` INT(15) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave Primaria. Identificador único del tipo de documento de identidad del usuario y la persona de facturación registrado en la tienda.',
  `abvTipoDocumento` VARCHAR(5) NOT NULL COMMENT 'Abreviatura del Tipo de documento de identidad del usuario y la persona de facturación registrado en la tienda.\n',
  `nombreTipoDocumento` VARCHAR(30) NOT NULL COMMENT 'Tipo de documento de identidad del usuario y la persona de facturación registrado en la tienda.',
  PRIMARY KEY (`idTipoDocumento`))
ENGINE = InnoDB
COMMENT = 'Se usa para almacenar los datos del tipo de documento de usuario y de facturación.';


-- -----------------------------------------------------
-- Table `DBTVFH`.`TblTipoUsuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`TblTipoUsuario` (
  `idTipoUsuario` INT(15) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave Primaria. Identificador único del tipo de usuario registrado en la tienda.',
  `nombreTipoUsuario` VARCHAR(30) NOT NULL COMMENT 'Tipo de usuario del sistema: Cliente o Administrador. Seleccionable solamente en el módulo administrador al crear un nuevo usuario.',
  PRIMARY KEY (`idTipoUsuario`))
ENGINE = InnoDB
COMMENT = 'Se usa para almacenar los datos del tipo de usuario.';


-- -----------------------------------------------------
-- Table `DBTVFH`.`TblPais`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`TblPais` (
  `idPais` INT(15) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave Primaria. Identificador único del país registrado en la tienda.',
  `nombrePais` VARCHAR(30) NOT NULL COMMENT 'Nombre del país registrado en la tienda.',
  PRIMARY KEY (`idPais`))
ENGINE = InnoDB
COMMENT = 'Se usa para almacenar los datos de los países.';


-- -----------------------------------------------------
-- Table `DBTVFH`.`TblDepProvReg`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`TblDepProvReg` (
  `idDepProvReg` INT(15) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave Primaria. Identificador único del departamento o provincia o región registrada en la tienda en la tienda.',
  `paisId` INT(15) UNSIGNED NOT NULL COMMENT 'Llave Foránea de la tabla TblPais. Nombre del país registrado en la tienda.',
  `nombreDepProvReg` VARCHAR(30) NOT NULL COMMENT 'Nombre del departamento o provincia o región registrada en la tienda.',
  PRIMARY KEY (`idDepProvReg`),
  INDEX `fk_TblDepProvReg_TblPais1_idx` (`paisId` ASC),
  CONSTRAINT `fk_TblDepProvReg_TblPais1`
    FOREIGN KEY (`paisId`)
    REFERENCES `DBTVFH`.`TblPais` (`idPais`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Se usa para almacenar los datos de los departamentos, provincias y regiones.';


-- -----------------------------------------------------
-- Table `DBTVFH`.`TblCiudad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`TblCiudad` (
  `idCiudad` INT(15) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave Primaria. Identificador único de la ciudad registrada en la tienda.',
  `depProvRegId` INT(15) UNSIGNED NOT NULL,
  `nombreCiudad` VARCHAR(30) NOT NULL COMMENT 'Nombre de la ciudad registrada en la tienda.',
  PRIMARY KEY (`idCiudad`),
  INDEX `fk_TblCiudad_TblDepProvReg1_idx` (`depProvRegId` ASC),
  CONSTRAINT `fk_TblCiudad_TblDepProvReg1`
    FOREIGN KEY (`depProvRegId`)
    REFERENCES `DBTVFH`.`TblDepProvReg` (`idDepProvReg`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Se usa para almacenar los datos de las ciudades.';


-- -----------------------------------------------------
-- Table `DBTVFH`.`TblUsuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`TblUsuario` (
  `idUsuario` INT(15) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave Primaria. Identificador único del usuario registrado en la tienda.',
  `tipoUsuarioId` INT(15) UNSIGNED NOT NULL COMMENT 'Llave Foránea de la tabla TblTipoUsuario. ID del Tipo de usuario del sistema: Cliente o Administrador. Seleccionable solamente en el módulo administrador al crear un nuevo usuario.\n',
  `fechaAltaUsuario` DATETIME NOT NULL COMMENT 'Fecha de registro del usuario registrado en la tienda.',
  `fechaBajaUsuario` DATETIME NULL COMMENT 'Fecha de eliminación del usuario registrado en la tienda.',
  `estadoUsuarioId` INT(15) UNSIGNED NOT NULL COMMENT 'Llave Foránea de la tabla TblEstadoUsuario. ID del Estado actual del usuario: Activado, Desactivado o Eliminado.\n',
  `apodoUsuario` VARCHAR(10) NOT NULL COMMENT 'Nombre de usuario único que se crea con la cuenta para la tienda. Máximo 10 carácteres.\n',
  `contraseñaUsuario` VARCHAR(15) NOT NULL COMMENT 'Contraseña del usuario que se registra en la tienda. Mínimo 8 carácteres, mínimo una letra mayúscula, mínimo una letra minuscula, mínimo un número y mínimo un símbolo.',
  `correoElectronicoUsuario` VARCHAR(60) NOT NULL COMMENT 'Correo electrónico del usuario registrado en la tienda.\n',
  `nombresUsuario` VARCHAR(50) NOT NULL COMMENT 'Nombres del usuario registrado en la tienda.',
  `apellidosUsuario` VARCHAR(50) NOT NULL COMMENT 'Apellidos del usuario registrado en la tienda.',
  `tipoDocumentoUsuarioId` INT(15) UNSIGNED NOT NULL COMMENT 'Llave Foránea de la tabla TblTipoDocumento. ID del Tipo de documento de identidad del usuario registrado en la tienda.',
  `numeroDocumentoUsuario` VARCHAR(30) NOT NULL COMMENT 'Número de documento de identidad del usuario registrado en la tienda.',
  `nombresFacturacion` VARCHAR(50) NOT NULL COMMENT 'Nombres de la persona a cargo de la facturación del pedido.',
  `apellidosFacturacion` VARCHAR(50) NOT NULL COMMENT 'Apellidos de la persona a cargo de la facturación del pedido.',
  `tipoDocumentoFacturacionId` INT(15) UNSIGNED NOT NULL COMMENT 'Llave Foránea de la tabla TblTipoDocumento. ID del Tipo de documento de la persona a cargo de la facturación del pedido.',
  `numeroDocumentoFacturacion` VARCHAR(30) NOT NULL COMMENT 'Número de documento de identidad de la persona a cargo de la facturación del pedido.',
  `correoElectronicoFacturacion` VARCHAR(60) NOT NULL COMMENT 'Correo electrónico de la persona a cargo de la facturación del pedido.',
  `numeroTelefonoFacturacion` VARCHAR(20) NOT NULL COMMENT 'Número de teléfono de la persona a cargo de la facturación del pedido.',
  `direccionFacturacion` VARCHAR(60) NOT NULL COMMENT 'Dirección de la persona a cargo de la facturación del pedido.',
  `ciudadFacturacionId` INT(15) UNSIGNED NOT NULL COMMENT 'Llave Foránea de la tabla TblCiudad. ID de la Ciudad de la persona a cargo de la facturación del pedido.',
  `nombresEnvio` VARCHAR(50) NOT NULL COMMENT 'Nombres de la persona a la cual se le va a enviar del pedido.\n',
  `apellidosEnvio` VARCHAR(50) NOT NULL COMMENT 'Apellidos de la persona a la cual se le va a enviar del pedido.',
  `numeroTelefonoEnvio` VARCHAR(20) NOT NULL COMMENT 'Número de teléfono de la persona a la cual se le va a enviar del pedido.',
  `direccionEnvio` VARCHAR(60) NOT NULL COMMENT 'Dirección de la persona a la cual se le va a enviar del pedido.',
  `ciudadEnvioId` INT(15) UNSIGNED NOT NULL COMMENT 'Llave Foránea de la tabla TblCiudad. ID de la Ciudad de la persona a la cual se le va a enviar del pedido.',
  PRIMARY KEY (`idUsuario`),
  INDEX `fk_TblUsuario_TblEstadoUsuario1_idx` (`estadoUsuarioId` ASC),
  INDEX `fk_TblUsuario_TblTipoDocumento1_idx` (`tipoDocumentoUsuarioId` ASC),
  UNIQUE INDEX `correoElectronicoUsuario_UNIQUE` (`correoElectronicoUsuario` ASC),
  UNIQUE INDEX `apodoUsuario_UNIQUE` (`apodoUsuario` ASC),
  INDEX `fk_TblUsuario_TblTipoUsuario1_idx` (`tipoUsuarioId` ASC),
  INDEX `fk_TblUsuario_TblTipoDocumento2_idx` (`tipoDocumentoFacturacionId` ASC),
  INDEX `fk_TblUsuario_TblCiudad1_idx` (`ciudadFacturacionId` ASC),
  INDEX `fk_TblUsuario_TblCiudad2_idx` (`ciudadEnvioId` ASC),
  CONSTRAINT `fk_TblUsuario_TblEstadoUsuario1`
    FOREIGN KEY (`estadoUsuarioId`)
    REFERENCES `DBTVFH`.`TblEstadoUsuario` (`idEstadoUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TblUsuario_TblTipoDocumento1`
    FOREIGN KEY (`tipoDocumentoUsuarioId`)
    REFERENCES `DBTVFH`.`TblTipoDocumento` (`idTipoDocumento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TblUsuario_TblTipoUsuario1`
    FOREIGN KEY (`tipoUsuarioId`)
    REFERENCES `DBTVFH`.`TblTipoUsuario` (`idTipoUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TblUsuario_TblTipoDocumento2`
    FOREIGN KEY (`tipoDocumentoFacturacionId`)
    REFERENCES `DBTVFH`.`TblTipoDocumento` (`idTipoDocumento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TblUsuario_TblCiudad1`
    FOREIGN KEY (`ciudadFacturacionId`)
    REFERENCES `DBTVFH`.`TblCiudad` (`idCiudad`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TblUsuario_TblCiudad2`
    FOREIGN KEY (`ciudadEnvioId`)
    REFERENCES `DBTVFH`.`TblCiudad` (`idCiudad`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Se usa para almacenar los datos de los usuarios (Administradores y Clientes).';


-- -----------------------------------------------------
-- Table `DBTVFH`.`TblEstadoPedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`TblEstadoPedido` (
  `idEstadoPedido` INT(15) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave Primaria. Identificador único del estado del pedido registrado en la tienda.',
  `nombreEstadoPedido` VARCHAR(30) NOT NULL COMMENT 'Estado del pedido creado por el cliente: Creado, Pagado, Enviado, Anulado, Devuelto, Reemplazado o Finalizado. Explicación Estados del Pedido: - Creado: Pedido creado por un cliente sin pagar. - Pagado: Pedido que ya fue pagado y confirmado por la pasarela de pagos. - Enviado: Pedido que ya fue confirmado y enviado de existencias de bodega. - Anulado: Pedido que supero el plazo máximo para pago (24 horas), abandonado, anulado o cancelado por el cliente, pago sin procesar, no fue entregado aún. - Devuelto: Pedido que fue entregado correctamente pero que el cliente lo devolvió, se debe hacer devolución de dinero. - Reemplazado: Pedido entregado pero se realizó un cambio de producto del mismo lote por daño en producto o solicitado por el cliente. - Finalizado: Pedido entregado correctamente sin inconvenientes.',
  PRIMARY KEY (`idEstadoPedido`))
ENGINE = InnoDB
COMMENT = 'Se usa para almacenar los datos del estado del pedido.';


-- -----------------------------------------------------
-- Table `DBTVFH`.`TblPedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`TblPedido` (
  `idPedido` INT(15) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave Primaria. Identificador único del pedido registrado en la tienda.\n',
  `estadoPedidoId` INT(15) UNSIGNED NOT NULL COMMENT 'Estado del pedido creado por el cliente: Creado, Pagado, Enviado, Anulado, Devuelto, Reemplazado o Finalizado. Explicación Estados del Pedido: - Creado: Pedido creado por un cliente sin pagar. - Pagado: Pedido que ya fue pagado y confirmado por la pasarela de pagos. - Enviado: Pedido que ya fue confirmado y enviado de existencias de bodega. - Anulado: Pedido que supero el plazo máximo para pago (24 horas), abandonado, anulado o cancelado por el cliente, pago sin procesar, no fue entregado aún. - Devuelto: Pedido que fue entregado correctamente pero que el cliente lo devolvió, se debe hacer devolución de dinero. - Reemplazado: Pedido entregado pero se realizó un cambio de producto del mismo lote por daño en producto o solicitado por el cliente. - Finalizado: Pedido entregado correctamente sin inconvenientes.',
  `fechaInicioPedido` DATETIME NOT NULL COMMENT 'Fecha del registro o la creación del pedido registrado en la tienda.',
  `fechaEntregaPedido` DATETIME NOT NULL COMMENT 'Fecha ingresada por el cliente para la entrega del pedido registrado en la tienda.',
  `fechaFinPedido` DATETIME NULL COMMENT 'Fecha de la finalización del pedido registrado en la tienda.',
  `usuarioId` INT(15) UNSIGNED NOT NULL COMMENT 'Llave Foránea de la tabla TblUsuario. Identificador único del usuario registrado en la tienda.',
  `mensajePedido` TEXT(300) NULL COMMENT 'Mensaje personalizado del cliente para la tarjeta del pedido.',
  `notaPedido` VARCHAR(150) NULL COMMENT 'Notas, observaciones o indicaciones del cliente para el pedido.',
  PRIMARY KEY (`idPedido`),
  INDEX `fk_TblPedido_TblEstadoPedido1_idx` (`estadoPedidoId` ASC),
  INDEX `fk_TblPedido_TblUsuario1_idx` (`usuarioId` ASC),
  CONSTRAINT `fk_TblPedido_TblEstadoPedido1`
    FOREIGN KEY (`estadoPedidoId`)
    REFERENCES `DBTVFH`.`TblEstadoPedido` (`idEstadoPedido`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TblPedido_TblUsuario1`
    FOREIGN KEY (`usuarioId`)
    REFERENCES `DBTVFH`.`TblUsuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Se usa para almacenar los datos básicos de los pedidos.';


-- -----------------------------------------------------
-- Table `DBTVFH`.`TblEstadoProducto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`TblEstadoProducto` (
  `idEstadoProducto` INT(15) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave Primaria. Identificador único del estado de producto registrado en la tienda.',
  `nombreEstadoProducto` VARCHAR(30) NOT NULL COMMENT 'Estado del producto registrado en la tienda: Activado, Desactivado, Borrador o Eliminado.',
  PRIMARY KEY (`idEstadoProducto`))
ENGINE = InnoDB
COMMENT = 'Se usa para almacenar los datos del estado del producto.';


-- -----------------------------------------------------
-- Table `DBTVFH`.`TblVisibilidadProducto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`TblVisibilidadProducto` (
  `idVisibilidadProducto` INT(15) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave Primaria. Identificador único de la visibilidad del producto registrado en la tienda.',
  `nombreVisibilidadProducto` VARCHAR(30) NOT NULL COMMENT 'Visibilidad del producto en la tienda: Público o Privado.',
  PRIMARY KEY (`idVisibilidadProducto`))
ENGINE = InnoDB
COMMENT = 'Se usa para almacenar los datos de la visibilidad del producto.';


-- -----------------------------------------------------
-- Table `DBTVFH`.`TblEstadoCategoria`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`TblEstadoCategoria` (
  `idEstadoCategoria` INT(15) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave Primaria. Identificador único del estado de la categoría registrada en la tienda.',
  `nombreEstadoCategoria` VARCHAR(30) NOT NULL COMMENT 'Estado de la categoría del producto registrada en la tienda: Activada, Desactivada o Eliminada.',
  PRIMARY KEY (`idEstadoCategoria`))
ENGINE = InnoDB
COMMENT = 'Se usa para almacenar los datos del estado de la categoría.';


-- -----------------------------------------------------
-- Table `DBTVFH`.`TblCategoria`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`TblCategoria` (
  `idCategoria` INT(15) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave Primaria. Identificador único de la categoría registrada en la tienda.',
  `estadoCategoriaId` INT(15) UNSIGNED NOT NULL COMMENT 'Llave Foránea de la tabla TblEstadoCategoria. ID del Estado de la categoría del producto registrada en la tienda: Activada, Desactivada o Eliminada.',
  `padreCategoriaId` INT(15) UNSIGNED NULL COMMENT 'ID de la Categoria padre de la categoría registrada en la tienda.',
  `fechaAltaCategoria` DATETIME NOT NULL COMMENT 'Fecha de registro de la categoría registrada en la tienda.',
  `fechaBajaCategoria` DATETIME NULL COMMENT 'Fecha de eliminación de la categoría registrada en la tienda.',
  `nombreCategoria` VARCHAR(30) NOT NULL COMMENT 'Nombre de la categoría registrada en la tienda.',
  `descripcionCategoria` TINYTEXT NULL COMMENT 'Descripción de la categoría registrada en la tienda.',
  `imagenCategoria` BLOB NULL COMMENT 'Imagen de la categoría registrada en la tienda.',
  PRIMARY KEY (`idCategoria`),
  INDEX `fk_TblCategoria_TblEstadoCategoria1_idx` (`estadoCategoriaId` ASC),
  INDEX `fk_TblCategoria_TblCategoria1_idx` (`padreCategoriaId` ASC),
  CONSTRAINT `fk_TblCategoria_TblEstadoCategoria1`
    FOREIGN KEY (`estadoCategoriaId`)
    REFERENCES `DBTVFH`.`TblEstadoCategoria` (`idEstadoCategoria`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TblCategoria_TblCategoria1`
    FOREIGN KEY (`padreCategoriaId`)
    REFERENCES `DBTVFH`.`TblCategoria` (`idCategoria`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Se usa para almacenar los datos de las categorías.';


-- -----------------------------------------------------
-- Table `DBTVFH`.`TblProducto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`TblProducto` (
  `idProducto` INT(15) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave Primaria. Identificador único del producto registrado en la tienda.',
  `estadoProductoId` INT(15) UNSIGNED NOT NULL COMMENT 'Llave Foránea de la tabla TblEstadoProducto. ID del Estado del producto registrado en la tienda: Activado, Desactivado, Borrador o Eliminado.',
  `visibilidadProductoId` INT(15) UNSIGNED NOT NULL COMMENT 'Llave Foránea de la tabla TblVisibilidadProducto. ID de la Visibilidad del producto registrado en la tienda: Público o Privado.',
  `fechaAltaProducto` DATETIME NOT NULL COMMENT 'Fecha de registro del producto registrado en la tienda.',
  `fechaBajaProducto` DATETIME NULL COMMENT 'Fecha de eliminación del producto registrado en la tienda.',
  `nombreProducto` VARCHAR(30) NOT NULL COMMENT 'Nombre del producto registrado en la tienda.',
  `categoriaId` INT(15) UNSIGNED NOT NULL COMMENT 'Llave Foránea de la tabla TblCategoria. ID de la Categoría a la cual pertenece el producto registrado en la tienda.',
  `skuProducto` VARCHAR(20) NULL COMMENT 'SKU (Stock Keeping Unit) Unidad de mantenimiento de stock. Código referencia de inventario del producto que maneja la empresa internamente.',
  `descripcionCortaProducto` TINYTEXT NULL COMMENT 'Descripción corta del producto registrado en la tienda.',
  `descripcionLargaProducto` TEXT(2000) NULL COMMENT 'Descripción larga del producto registrado en la tienda.',
  `valorUnitarioProducto` DECIMAL(10,2) NOT NULL COMMENT 'Valor unitario del producto registrado en la tienda.',
  `imagenProducto` BLOB NULL COMMENT 'Imagen del producto registrado en la tienda.',
  PRIMARY KEY (`idProducto`),
  INDEX `fk_TblProducto_TblEstadoProducto1_idx` (`estadoProductoId` ASC),
  INDEX `fk_TblProducto_TblVisibilidadProducto1_idx` (`visibilidadProductoId` ASC),
  INDEX `fk_TblProducto_TblCategoria1_idx` (`categoriaId` ASC),
  CONSTRAINT `fk_TblProducto_TblEstadoProducto1`
    FOREIGN KEY (`estadoProductoId`)
    REFERENCES `DBTVFH`.`TblEstadoProducto` (`idEstadoProducto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TblProducto_TblVisibilidadProducto1`
    FOREIGN KEY (`visibilidadProductoId`)
    REFERENCES `DBTVFH`.`TblVisibilidadProducto` (`idVisibilidadProducto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TblProducto_TblCategoria1`
    FOREIGN KEY (`categoriaId`)
    REFERENCES `DBTVFH`.`TblCategoria` (`idCategoria`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Se usa para almacenar los datos de los productos.';


-- -----------------------------------------------------
-- Table `DBTVFH`.`TblDetallePedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`TblDetallePedido` (
  `idDetallePedido` INT(15) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave Primaria. Identificador único del detalle del pedido registrado en la tienda.',
  `pedidoId` INT(15) UNSIGNED NOT NULL COMMENT 'Llave Foránea de la tabla TblPedido. Identificador único del pedido registrado en la tienda.',
  `productoId` INT(15) UNSIGNED NOT NULL COMMENT 'Llave Foránea de la tabla TblProducto. Identificador único del producto registrado en la tienda.',
  `cantidadProducto` INT(1) UNSIGNED NOT NULL COMMENT 'Cantidad del producto añadido al carrito de compras de la tienda.',
  `valorTotalProducto` DECIMAL(10,2) UNSIGNED NOT NULL COMMENT 'Valor total de los productos del mismo id en el carrito de compras de la tienda. Para calcular esta celda se debe hacer la operación en los campos: \"valorUnitarioProducto\" multiplicar por \"cantidadProducto\".',
  `subTotalPedido` DECIMAL(10,2) UNSIGNED NOT NULL COMMENT 'Subtotal de los productos en el carrito de compras de la tienda.',
  `valorEnvioPedido` DECIMAL(10,2) UNSIGNED NOT NULL COMMENT 'Valor del envío calculado automaticamente para el pedido registrado en la tienda.',
  `totalPedido` DECIMAL(10,2) UNSIGNED NOT NULL COMMENT 'Total del pedido incluyendo valor del envío registrado en la tienda.',
  PRIMARY KEY (`idDetallePedido`),
  INDEX `fk_TblDetallePedido_TblPedido1_idx` (`pedidoId` ASC),
  INDEX `fk_TblDetallePedido_TblProducto1_idx` (`productoId` ASC),
  CONSTRAINT `fk_TblDetallePedido_TblPedido1`
    FOREIGN KEY (`pedidoId`)
    REFERENCES `DBTVFH`.`TblPedido` (`idPedido`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TblDetallePedido_TblProducto1`
    FOREIGN KEY (`productoId`)
    REFERENCES `DBTVFH`.`TblProducto` (`idProducto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Se usa para almacenar los datos detallados de los pedidos.';

USE `DBTVFH` ;

-- -----------------------------------------------------
-- Placeholder table for view `DBTVFH`.`PAListarUsuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`PAListarUsuarios` (`idUsuario` INT, `tipoUsuarioId` INT, `apodoUsuario` INT, `nombresUsuario` INT, `apellidosUsuario` INT, `fechaAltaUsuario` INT, `fechaBajaUsuario` INT, `estadoUsuarioId` INT, `totalPedidos` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBTVFH`.`PAListarProductos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`PAListarProductos` (`idProducto` INT, `imagenProducto` INT, `nombreProducto` INT, `categoriaId` INT, `valorUnitarioProducto` INT, `FechaAltaProducto` INT, `fechaBajaProducto` INT, `visibilidadProductoId` INT, `estadoProductoId` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBTVFH`.`PAListarCategorias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`PAListarCategorias` (`idCategoria` INT, `imagenCategoria` INT, `nombreCategoria` INT, `padreCategoriaId` INT, `fechaAltaCategoria` INT, `fechaBajaCategoria` INT, `estadoCategoriaId` INT, `totalProductos` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBTVFH`.`PAListarPedidos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBTVFH`.`PAListarPedidos` (`idPedido` INT, `usuarioId` INT, `apodoUsuario` INT, `totalPedido` INT, `fechaInicioPedido` INT, `fechaEntregaPedido` INT, `fechaFinPedido` INT, `estadoPedidoId` INT);

-- -----------------------------------------------------
-- procedure PACrearProducto
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Crear Producto Script
CREATE PROCEDURE PACrearProducto ( 
	nombreProducto VARCHAR (30),
	categoriaId INT (15),
	skuProducto VARCHAR (20),
	valorUnitarioProducto DECIMAL (10,2),
	descripcionCortaProducto TINYTEXT,
	descripcionLargaProducto TEXT (2000),
	imagenProducto BLOB,
	estadoProductoId INT (15),
	visibilidadProductoId INT (15)
)
	INSERT INTO dbtvfh.tblproducto (
		nombreProducto,
		categoriaId,
		skuProducto,
		valorUnitarioProducto,
		descripcionCortaProducto,
		descripcionLargaProducto,
		imagenProducto,
		estadoProductoId,
		visibilidadProductoId,
		fechaAltaProducto
	)
	VALUES (	
	nombreProducto,
	categoriaId,
	skuProducto,
	valorUnitarioProducto,
	descripcionCortaProducto,
	descripcionLargaProducto,
	imagenProducto,
	estadoProductoId,
	visibilidadProductoId,
	sysdate()
	);$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PACrearCategoria
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Crear Categoría Script
CREATE PROCEDURE PACrearCategoria ( 
	nombreCategoria VARCHAR (30),
	padreCategoriaId INT (15),
	descripcionCategoria TINYTEXT,
	imagenCategoria BLOB,
	estadoCategoriaId INT (15)
)
	INSERT INTO dbtvfh.tblcategoria (
		nombreCategoria,
		padreCategoriaId,
		descripcionCategoria,
		imagenCategoria,
		estadoCategoriaId,
		fechaAltaCategoria
	)
	VALUES (	
	nombreCategoria,
	padreCategoriaId,
	descripcionCategoria,
	imagenCategoria,
	estadoCategoriaId,
	sysdate()
	);$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PACrearAdmin
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Crear Usuarios Administradores Script
CREATE PROCEDURE PACrearAdmin ( 
	apodoUsuario VARCHAR (10),
	contraseñaUsuario VARCHAR (15),
	correoElectronicoUsuario VARCHAR (60),
	nombresUsuario VARCHAR (50),
	apellidosUsuario VARCHAR (50),
	tipoDocumentoUsuarioId INT (15),
	numeroDocumentoUsuario VARCHAR (30)
)
	INSERT INTO dbtvfh.tblusuario (
		tipoUsuarioId,
		fechaAltaUsuario,
		fechaBajaUsuario,
		estadoUsuarioId,
		apodoUsuario,
		contraseñaUsuario,
		correoElectronicoUsuario,
		nombresUsuario,
		apellidosUsuario,
		tipoDocumentoUsuarioId,
		numeroDocumentoUsuario,
		nombresFacturacion,
		apellidosFacturacion,
		tipoDocumentoFacturacionId,
		numeroDocumentoFacturacion,
		correoElectronicoFacturacion,
		numeroTelefonoFacturacion,
		direccionFacturacion,
		ciudadFacturacionId,
		nombresEnvio,
		apellidosEnvio,
		direccionEnvio,
		numeroTelefonoEnvio,
		ciudadEnvioId)
	VALUES (
		1,
		sysdate(),
		NULL,
		1,
		apodoUsuario,
		contraseñaUsuario,
		correoElectronicoUsuario,
		nombresUsuario,
		apellidosUsuario,
		tipoDocumentoUsuarioId,
		numeroDocumentoUsuario,
		'',
		'',
		1,
		1,
		'',
		1,
		'',
		1,
		'',
		'',
		'',
		1,
		1);$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PACrearCliente
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Crear Usuarios Clientes Script
CREATE PROCEDURE PACrearCliente ( 
	apodoUsuario VARCHAR (10),
	contraseñaUsuario VARCHAR (15),
	correoElectronicoUsuario VARCHAR (60),
	nombresUsuario VARCHAR (50),
	apellidosUsuario VARCHAR (50),
	tipoDocumentoUsuarioId INT (15),
	numeroDocumentoUsuario VARCHAR (30),
	nombresFacturacion VARCHAR (50),
	apellidosFacturacion VARCHAR (50),
	tipoDocumentoFacturacionId  INT (15),
	numeroDocumentoFacturacion VARCHAR (30),
	correoElectronicoFacturacion VARCHAR (60),
	numeroTelefonoFacturacion INT (20),
	direccionFacturacion VARCHAR (60),
	ciudadFacturacionId INT (15),
	nombresEnvio VARCHAR (50),
	apellidosEnvio VARCHAR (50),
	direccionEnvio VARCHAR (60),
	numeroTelefonoEnvio INT (20),
	ciudadEnvioId INT (15)
)
	INSERT INTO dbtvfh.tblusuario (
		tipoUsuarioId,
		fechaAltaUsuario,
		fechaBajaUsuario,
		estadoUsuarioId,
		apodoUsuario,
		contraseñaUsuario,
		correoElectronicoUsuario,
		nombresUsuario,
		apellidosUsuario,
		tipoDocumentoUsuarioId,
		numeroDocumentoUsuario,
		nombresFacturacion,
		apellidosFacturacion,
		tipoDocumentoFacturacionId,
		numeroDocumentoFacturacion,
		correoElectronicoFacturacion,
		numeroTelefonoFacturacion,
		direccionFacturacion,
		ciudadFacturacionId,
		nombresEnvio,
		apellidosEnvio,
		direccionEnvio,
		numeroTelefonoEnvio,
		ciudadEnvioId)
	VALUES (
		2,
		sysdate(),
		NULL,
		1,
		apodoUsuario,
		contraseñaUsuario,
		correoElectronicoUsuario,
		nombresUsuario,
		apellidosUsuario,
		tipoDocumentoUsuarioId,
		numeroDocumentoUsuario,
		nombresFacturacion,
		apellidosFacturacion,
		tipoDocumentoFacturacionId,
		numeroDocumentoFacturacion,
		correoElectronicoFacturacion,
		numeroTelefonoFacturacion,
		direccionFacturacion,
		ciudadFacturacionId,
		nombresEnvio,
		apellidosEnvio,
		direccionEnvio,
		numeroTelefonoEnvio,
		ciudadEnvioId);$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PACrearPedido
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Crear Pedido Script
CREATE PROCEDURE PACrearPedido ( 
	usuarioId INT (15),
	estadoPedidoId INT	(15),
	fechaEntregaPedido	DATETIME,
	mensajePedido TEXT (300),
	notaPedido VARCHAR (150)
)
	INSERT INTO dbtvfh.tblpedido (
		estadoPedidoId,
		fechaInicioPedido,
		fechaEntregaPedido,
		fechaFinPedido,
		usuarioId,
		mensajePedido,
		notaPedido)
	VALUES (	
		1,
		sysdate(),
		fechaEntregaPedido,
		NULL,
		usuarioId,
		mensajePedido,
		notaPedido);$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PACrearDetallePedido
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Crear Detalle Pedido Script
CREATE PROCEDURE PACrearDetallePedido ( 
	INpedidoId INT (15),
	INproductoId INT (15),
	INcantidadProducto INT (1),
	INvalorTotalProducto DECIMAL (10,2),
	INsubTotalPedido DECIMAL (10,2),
	INvalorEnvioPedido DECIMAL (10,2),
	INtotalPedido DECIMAL (10,2)
)
	INSERT INTO dbtvfh.tbldetallepedido (
		pedidoId,
		productoId,
		cantidadProducto,
		valorTotalProducto,
		subTotalPedido,
		valorEnvioPedido,
		totalPedido)
	VALUES (	
		INpedidoId,
		INproductoId,
		INcantidadProducto,
		INvalorTotalProducto,
		INsubTotalPedido,
		INvalorEnvioPedido,
		INtotalPedido);$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PAEditarCategoria
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Editar Categoría Script
CREATE PROCEDURE PAEditarCategoria (
	INidCategoria INT (15),
	INnombreCategoria  VARCHAR (30),
	INpadreCategoriaId  INT (15),
	INestadoCategoriaId  INT (15),
	INdescripcionCategoria TINYTEXT,
	INimagenCategoria BLOB
)
	UPDATE dbtvfh.tblcategoria SET 
		estadoCategoriaId = INestadoCategoriaId,
		padreCategoriaId = INpadreCategoriaId,
		nombreCategoria = INnombreCategoria,
		descripcionCategoria  = INdescripcionCategoria,
		imagenCategoria = INimagenCategoria
	WHERE idCategoria = INidCategoria$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PAEditarProducto
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Editar Producto Script
CREATE PROCEDURE PAEditarProducto (
	INidProducto INT (15),
	INnombreProducto VARCHAR (30),
	INcategoriaId  INT (15),
	INskuProducto VARCHAR (20),
	INdescripcionCortaProducto TINYTEXT,
	INdescripcionLargaProducto TEXT (2000),
	INimagenProducto BLOB,
	INestadoProductoId  INT (15),
	INvisibilidadProductoId  INT (15)
)
	UPDATE dbtvfh.tblproducto SET 
		nombreProducto = INnombreProducto,
		categoriaId = INcategoriaId,
		skuProducto = INskuProducto,
		descripcionCortaProducto = INdescripcionCortaProducto,
		descripcionLargaProducto = INdescripcionLargaProducto,
		imagenProducto = INimagenProducto,
		estadoProductoId = INestadoProductoId,
		visibilidadProductoId = visibilidadProductoId
	WHERE idProducto = INidProducto$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PAEditarAdmin
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Editar Usuarios Administradores Script
CREATE PROCEDURE PAEditarAdmin ( 
	INidUsuario INT (15),
	INcontraseñaUsuario VARCHAR (15),
	INcorreoElectronicoUsuario VARCHAR (60),
	INnombresUsuario VARCHAR (50),
	INapellidosUsuario VARCHAR (50),
	INtipoDocumentoUsuarioId INT (15),
	INnumeroDocumentoUsuario VARCHAR (30),
	INestadoUsuarioId INT (15)
)
	UPDATE dbtvfh.tblusuario SET
		estadoUsuarioId = INestadoUsuarioId,
		contraseñaUsuario = INcontraseñaUsuario,
		correoElectronicoUsuario = INcorreoElectronicoUsuario,
		nombresUsuario = INnombresUsuario,
		apellidosUsuario = INapellidosUsuario,
		tipoDocumentoUsuarioId = INtipoDocumentoUsuarioId,
		numeroDocumentoUsuario = INnumeroDocumentoUsuario
	WHERE idUsuario = INidUsuario$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PAEditarCliente
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Editar Usuarios Clientes Script
CREATE PROCEDURE PAEditarCliente ( 
	INidUsuario INT (15),
	INcontraseñaUsuario VARCHAR (15),
	INcorreoElectronicoUsuario VARCHAR (60),
	INnombresUsuario VARCHAR (50),
	INapellidosUsuario VARCHAR (50),
	INtipoDocumentoUsuarioId INT (15),
	INnumeroDocumentoUsuario VARCHAR (30),
	INestadoUsuarioId INT (15),
	INnombresFacturacion VARCHAR (50),
	INapellidosFacturacion VARCHAR (50),
	INtipoDocumentoFacturacionId  INT (15),
	INnumeroDocumentoFacturacion VARCHAR (20),
	INcorreoElectronicoFacturacion VARCHAR (60),
	INnumeroTelefonoFacturacion INT (20),
	INdireccionFacturacion VARCHAR (60),
	INciudadFacturacionId INT (15),
	INnombresEnvio VARCHAR (50),
	INapellidosEnvio VARCHAR (50),
	INdireccionEnvio VARCHAR (60),
	INnumeroTelefonoEnvio INT (20),
	INciudadEnvioId INT (15)
)
	UPDATE dbtvfh.tblusuario SET
		estadoUsuarioId = INestadoUsuarioId,
		contraseñaUsuario = INcontraseñaUsuario,
		correoElectronicoUsuario = INcorreoElectronicoUsuario,
		nombresUsuario = INnombresUsuario,
		apellidosUsuario = INapellidosUsuario,
		tipoDocumentoUsuarioId = INtipoDocumentoUsuarioId,
		numeroDocumentoUsuario = INnumeroDocumentoUsuario,
		nombresFacturacion = INnombresFacturacion,
		apellidosFacturacion = INapellidosFacturacion,
		tipoDocumentoFacturacionId  = INtipoDocumentoFacturacionId,
		numeroDocumentoFacturacion = INnumeroDocumentoFacturacion,
		correoElectronicoFacturacion = INcorreoElectronicoFacturacion,
		numeroTelefonoFacturacion  = INnumeroTelefonoFacturacion,
		direccionFacturacion = INdireccionFacturacion,
		ciudadFacturacionId = INciudadFacturacionId,
		nombresEnvio = INnombresEnvio,
		apellidosEnvio = INapellidosEnvio,
		direccionEnvio = INdireccionEnvio,
		numeroTelefonoEnvio = INnumeroTelefonoEnvio,
		ciudadEnvioId = INciudadEnvioId
	WHERE idUsuario = INidUsuario$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PAEditarPedido
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Editar Pedido Script
CREATE PROCEDURE PAEditarPedido (
	INidpedido INT (15),
	INestadoPedidoId INT (15)
)
	UPDATE dbtvfh.tblpedido SET 
		estadoPedidoId  = INestadoPedidoId 
	WHERE idpedido = INidpedido$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PAVerCategoria
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Ver Categoría Script
CREATE PROCEDURE PAVerCategoria ( 
	INidCategoria INT (15)
)
SELECT 
	nombreCategoria,
	padreCategoriaId,
	descripcionCategoria,
	imagenCategoria,
	estadoCategoriaId
FROM dbtvfh.tblcategoria
	WHERE idCategoria = INidCategoria;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PAVerProducto
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Ver Producto Script
CREATE PROCEDURE PAVerProducto ( 
	INidProducto INT (15)
)
SELECT 
	imagenProducto,
	estadoProductoId,
	skuProducto,
	nombreProducto,
	valorUnitarioProducto,
	categoriaId,
	descripcionCortaProducto,
	descripcionLargaProducto
FROM dbtvfh.tblproducto
	WHERE idProducto = INidProducto;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PAVerAdmin
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Ver Usuario Administrador Script
CREATE PROCEDURE PAVerAdmin ( 
	INidUsuario INT (15)
)
SELECT 
	idUsuario,
	apodoUsuario,
	contraseñaUsuario,
	correoElectronicoUsuario,
	nombresUsuario,
	apellidosUsuario,
	tipoDocumentoUsuarioId,
	numeroDocumentoUsuario,
	tipoUsuarioId,
	estadoUsuarioId,
	fechaAltaUsuario,
	fechaBajaUsuario
FROM dbtvfh.tblusuario 
	WHERE idUsuario = INidUsuario;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PAVerCliente
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Ver Usuario ClienteScript
CREATE PROCEDURE PAVerCliente ( 
	INidUsuario INT (15)
)
	SELECT * FROM dbtvfh.tblusuario 
	WHERE idUsuario = INidUsuario;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PAVerPedido
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Ver Pedido Script
CREATE PROCEDURE PAVerPedido( 
	INidPedido INT (15)
)
	SELECT * FROM dbtvfh.tblpedido
	WHERE idPedido = INidPedido
	LIMIT 1;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PAVerDetallePedido
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Ver Detalle Pedido Script, el listado de los detalles
CREATE PROCEDURE PAVerDetallePedido( 
	INidPedido INT (15)
)
	SELECT * FROM dbtvfh.tbldetallepedido
	WHERE PedidoId = INidPedido;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PAEliminarProducto
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Eliminar Producto Script
CREATE PROCEDURE PAEliminarProducto (
	INidProducto INT (15)
)
	UPDATE dbtvfh.tblproducto  SET 
		estadoProductoId = 3,
		fechaBajaProducto = sysdate()
	WHERE idProducto = INidProducto$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PAEliminarCategoria
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Eliminar Categoría Script
CREATE PROCEDURE PAEliminarCategoria (
	INidCategoria INT (15)
)
	UPDATE dbtvfh.tblcategoria SET 
		estadoCategoriaId = 3,
		fechaBajaCategoria = sysdate()
	WHERE idCategoria = INidCategoria$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PAEliminarUsuario
-- -----------------------------------------------------

DELIMITER $$
USE `DBTVFH`$$
-- Eliminar Usuarios Script
CREATE PROCEDURE PAEliminarUsuario ( 
	INidUsuario INT (15)
)
	UPDATE dbtvfh.tblusuario  SET 
		estadoUsuarioId = 3,
		fechaBajaUsuario  = sysdate()
	WHERE idUsuario = INidUsuario$$

DELIMITER ;

-- -----------------------------------------------------
-- View `DBTVFH`.`PAListarUsuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBTVFH`.`PAListarUsuarios`;
USE `DBTVFH`;
-- Listar Usuarios Script
CREATE  OR REPLACE VIEW `PAListarUsuarios` AS
SELECT 
	u.idUsuario,
	u.tipoUsuarioId,
	u.apodoUsuario,
	u.nombresUsuario,
	u.apellidosUsuario,
	u.fechaAltaUsuario,
	u.fechaBajaUsuario,
	u.estadoUsuarioId,
	(select count(*)
	from dbtvfh.tblpedido as p
	where p.usuarioId = u.idUsuario AND p.estadoPedidoId = 'Finalizado') as totalPedidos
FROM dbtvfh.tblusuario as u;

-- -----------------------------------------------------
-- View `DBTVFH`.`PAListarProductos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBTVFH`.`PAListarProductos`;
USE `DBTVFH`;
-- Listar Productos Script
CREATE  OR REPLACE VIEW `PAListarProductos` AS
SELECT 
	idProducto, 
    imagenProducto, 
    nombreProducto, 
    categoriaId, 
    valorUnitarioProducto, 
    FechaAltaProducto, 
    fechaBajaProducto, 
    visibilidadProductoId, 
    estadoProductoId 
FROM dbtvfh.tblproducto;

-- -----------------------------------------------------
-- View `DBTVFH`.`PAListarCategorias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBTVFH`.`PAListarCategorias`;
USE `DBTVFH`;
-- Listar Categorías Script
CREATE  OR REPLACE VIEW `PAListarCategorias` AS
SELECT 
	c.idCategoria, 
	c.imagenCategoria,
	c.nombreCategoria, 
	c.padreCategoriaId, 
	c.fechaAltaCategoria, 
	c.fechaBajaCategoria, 
	c.estadoCategoriaId,
	(select count(*)
	from dbtvfh.tblproducto as p
	where p.categoriaId = c.idCategoria) AS totalProductos
FROM dbtvfh.tblcategoria AS c;

-- -----------------------------------------------------
-- View `DBTVFH`.`PAListarPedidos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBTVFH`.`PAListarPedidos`;
USE `DBTVFH`;
-- Listar Pedidos Script
CREATE  OR REPLACE VIEW `PAListarPedidos` AS
SELECT 
	P.idPedido, 
    P.usuarioId, 
    U.apodoUsuario, 
    D.totalPedido, 
    fechaInicioPedido, 
    fechaEntregaPedido, 
    fechaFinPedido, 
    estadoPedidoId 
FROM dbtvfh.tblpedido P 
	JOIN dbtvfh.tblusuario U ON P.usuarioId = U.idUsuario
	JOIN dbtvfh.tbldetallepedido D ON P.idPedido = D.pedidoId;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `DBTVFH`.`TblEstadoUsuario`
-- -----------------------------------------------------
START TRANSACTION;
USE `DBTVFH`;
INSERT INTO `DBTVFH`.`TblEstadoUsuario` (`idEstadoUsuario`, `nombreEstadoUsuario`) VALUES (1, 'Activado');
INSERT INTO `DBTVFH`.`TblEstadoUsuario` (`idEstadoUsuario`, `nombreEstadoUsuario`) VALUES (2, 'Desactivado');
INSERT INTO `DBTVFH`.`TblEstadoUsuario` (`idEstadoUsuario`, `nombreEstadoUsuario`) VALUES (3, 'Eliminado');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DBTVFH`.`TblTipoDocumento`
-- -----------------------------------------------------
START TRANSACTION;
USE `DBTVFH`;
INSERT INTO `DBTVFH`.`TblTipoDocumento` (`idTipoDocumento`, `abvTipoDocumento`, `nombreTipoDocumento`) VALUES (1, 'CC', 'Cédula de Ciudadanía');
INSERT INTO `DBTVFH`.`TblTipoDocumento` (`idTipoDocumento`, `abvTipoDocumento`, `nombreTipoDocumento`) VALUES (2, 'NIT', 'Num. Id. Tributaria');
INSERT INTO `DBTVFH`.`TblTipoDocumento` (`idTipoDocumento`, `abvTipoDocumento`, `nombreTipoDocumento`) VALUES (3, 'PA', 'Pasaporte');
INSERT INTO `DBTVFH`.`TblTipoDocumento` (`idTipoDocumento`, `abvTipoDocumento`, `nombreTipoDocumento`) VALUES (4, 'CE', 'Cédula de Extranjería');
INSERT INTO `DBTVFH`.`TblTipoDocumento` (`idTipoDocumento`, `abvTipoDocumento`, `nombreTipoDocumento`) VALUES (5, 'DNI', 'Docm. Nal. Id.');
INSERT INTO `DBTVFH`.`TblTipoDocumento` (`idTipoDocumento`, `abvTipoDocumento`, `nombreTipoDocumento`) VALUES (6, 'PEP', 'Permiso Especial Permanencia');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DBTVFH`.`TblTipoUsuario`
-- -----------------------------------------------------
START TRANSACTION;
USE `DBTVFH`;
INSERT INTO `DBTVFH`.`TblTipoUsuario` (`idTipoUsuario`, `nombreTipoUsuario`) VALUES (1, 'Administrador');
INSERT INTO `DBTVFH`.`TblTipoUsuario` (`idTipoUsuario`, `nombreTipoUsuario`) VALUES (2, 'Cliente');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DBTVFH`.`TblPais`
-- -----------------------------------------------------
START TRANSACTION;
USE `DBTVFH`;
INSERT INTO `DBTVFH`.`TblPais` (`idPais`, `nombrePais`) VALUES (1, 'Colombia');
INSERT INTO `DBTVFH`.`TblPais` (`idPais`, `nombrePais`) VALUES (2, 'Venezuela');
INSERT INTO `DBTVFH`.`TblPais` (`idPais`, `nombrePais`) VALUES (3, 'Ecuador');
INSERT INTO `DBTVFH`.`TblPais` (`idPais`, `nombrePais`) VALUES (4, 'Perú');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DBTVFH`.`TblDepProvReg`
-- -----------------------------------------------------
START TRANSACTION;
USE `DBTVFH`;
INSERT INTO `DBTVFH`.`TblDepProvReg` (`idDepProvReg`, `paisId`, `nombreDepProvReg`) VALUES (1, 1, 'Bogotá D.C.');
INSERT INTO `DBTVFH`.`TblDepProvReg` (`idDepProvReg`, `paisId`, `nombreDepProvReg`) VALUES (2, 1, 'Cundinamarca');
INSERT INTO `DBTVFH`.`TblDepProvReg` (`idDepProvReg`, `paisId`, `nombreDepProvReg`) VALUES (3, 1, 'Valle del Cauca');
INSERT INTO `DBTVFH`.`TblDepProvReg` (`idDepProvReg`, `paisId`, `nombreDepProvReg`) VALUES (4, 1, 'Tolima');
INSERT INTO `DBTVFH`.`TblDepProvReg` (`idDepProvReg`, `paisId`, `nombreDepProvReg`) VALUES (5, 1, 'Boyacá');
INSERT INTO `DBTVFH`.`TblDepProvReg` (`idDepProvReg`, `paisId`, `nombreDepProvReg`) VALUES (6, 1, 'Antioquia');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DBTVFH`.`TblCiudad`
-- -----------------------------------------------------
START TRANSACTION;
USE `DBTVFH`;
INSERT INTO `DBTVFH`.`TblCiudad` (`idCiudad`, `depProvRegId`, `nombreCiudad`) VALUES (1, 1, 'Bogotá D.C.');
INSERT INTO `DBTVFH`.`TblCiudad` (`idCiudad`, `depProvRegId`, `nombreCiudad`) VALUES (2, 2, 'Chía');
INSERT INTO `DBTVFH`.`TblCiudad` (`idCiudad`, `depProvRegId`, `nombreCiudad`) VALUES (3, 3, 'Cali');
INSERT INTO `DBTVFH`.`TblCiudad` (`idCiudad`, `depProvRegId`, `nombreCiudad`) VALUES (4, 4, 'Ibagué');
INSERT INTO `DBTVFH`.`TblCiudad` (`idCiudad`, `depProvRegId`, `nombreCiudad`) VALUES (5, 5, 'Tunja');
INSERT INTO `DBTVFH`.`TblCiudad` (`idCiudad`, `depProvRegId`, `nombreCiudad`) VALUES (6, 6, 'Medellín');
INSERT INTO `DBTVFH`.`TblCiudad` (`idCiudad`, `depProvRegId`, `nombreCiudad`) VALUES (7, 2, 'Soacha');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DBTVFH`.`TblUsuario`
-- -----------------------------------------------------
START TRANSACTION;
USE `DBTVFH`;
INSERT INTO `DBTVFH`.`TblUsuario` (`idUsuario`, `tipoUsuarioId`, `fechaAltaUsuario`, `fechaBajaUsuario`, `estadoUsuarioId`, `apodoUsuario`, `contraseñaUsuario`, `correoElectronicoUsuario`, `nombresUsuario`, `apellidosUsuario`, `tipoDocumentoUsuarioId`, `numeroDocumentoUsuario`, `nombresFacturacion`, `apellidosFacturacion`, `tipoDocumentoFacturacionId`, `numeroDocumentoFacturacion`, `correoElectronicoFacturacion`, `numeroTelefonoFacturacion`, `direccionFacturacion`, `ciudadFacturacionId`, `nombresEnvio`, `apellidosEnvio`, `numeroTelefonoEnvio`, `direccionEnvio`, `ciudadEnvioId`) VALUES (1, 1, '2022-09-24 00:00:00', NULL, 1, 'PAdmin1', 'PruebaAdmin1', 'PruebaAdmin1', 'PruebaAdmin1', 'PruebaAdmin1', 1, ' ', ' ', ' ', 1, ' ', ' ', '1', ' ', 1, ' ', ' ', '1', ' ', 1);
INSERT INTO `DBTVFH`.`TblUsuario` (`idUsuario`, `tipoUsuarioId`, `fechaAltaUsuario`, `fechaBajaUsuario`, `estadoUsuarioId`, `apodoUsuario`, `contraseñaUsuario`, `correoElectronicoUsuario`, `nombresUsuario`, `apellidosUsuario`, `tipoDocumentoUsuarioId`, `numeroDocumentoUsuario`, `nombresFacturacion`, `apellidosFacturacion`, `tipoDocumentoFacturacionId`, `numeroDocumentoFacturacion`, `correoElectronicoFacturacion`, `numeroTelefonoFacturacion`, `direccionFacturacion`, `ciudadFacturacionId`, `nombresEnvio`, `apellidosEnvio`, `numeroTelefonoEnvio`, `direccionEnvio`, `ciudadEnvioId`) VALUES (2, 2, '2022-09-24 00:00:00', NULL, 1, 'PCliente1', 'PruebaCliente1', 'PruebaCliente1', 'PruebaCliente1', 'PruebaCliente1', 1, 'PruebaCliente1', 'PruebaCliente1', 'PruebaCliente1', 1, 'PruebaCliente1', 'PruebaCliente1', '11111', 'PruebaCliente1', 1, 'PruebaCliente1', 'PruebaCliente1', '11111', 'PruebaCliente1', 1);
INSERT INTO `DBTVFH`.`TblUsuario` (`idUsuario`, `tipoUsuarioId`, `fechaAltaUsuario`, `fechaBajaUsuario`, `estadoUsuarioId`, `apodoUsuario`, `contraseñaUsuario`, `correoElectronicoUsuario`, `nombresUsuario`, `apellidosUsuario`, `tipoDocumentoUsuarioId`, `numeroDocumentoUsuario`, `nombresFacturacion`, `apellidosFacturacion`, `tipoDocumentoFacturacionId`, `numeroDocumentoFacturacion`, `correoElectronicoFacturacion`, `numeroTelefonoFacturacion`, `direccionFacturacion`, `ciudadFacturacionId`, `nombresEnvio`, `apellidosEnvio`, `numeroTelefonoEnvio`, `direccionEnvio`, `ciudadEnvioId`) VALUES (3, 1, '2022-09-24 00:00:00', NULL, 1, 'PAdmin2', 'PAdmin2', 'PAdmin2', 'PAdmin2', 'PAdmin2', 1, ' ', ' ', ' ', 1, ' ', ' ', '1', ' ', 1, ' ', ' ', '1', ' ', 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `DBTVFH`.`TblEstadoPedido`
-- -----------------------------------------------------
START TRANSACTION;
USE `DBTVFH`;
INSERT INTO `DBTVFH`.`TblEstadoPedido` (`idEstadoPedido`, `nombreEstadoPedido`) VALUES (1, 'Creado');
INSERT INTO `DBTVFH`.`TblEstadoPedido` (`idEstadoPedido`, `nombreEstadoPedido`) VALUES (2, 'Pagado');
INSERT INTO `DBTVFH`.`TblEstadoPedido` (`idEstadoPedido`, `nombreEstadoPedido`) VALUES (3, 'Enviado');
INSERT INTO `DBTVFH`.`TblEstadoPedido` (`idEstadoPedido`, `nombreEstadoPedido`) VALUES (4, 'Anulado');
INSERT INTO `DBTVFH`.`TblEstadoPedido` (`idEstadoPedido`, `nombreEstadoPedido`) VALUES (5, 'Devuelto');
INSERT INTO `DBTVFH`.`TblEstadoPedido` (`idEstadoPedido`, `nombreEstadoPedido`) VALUES (6, 'Finalizado');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DBTVFH`.`TblPedido`
-- -----------------------------------------------------
START TRANSACTION;
USE `DBTVFH`;
INSERT INTO `DBTVFH`.`TblPedido` (`idPedido`, `estadoPedidoId`, `fechaInicioPedido`, `fechaEntregaPedido`, `fechaFinPedido`, `usuarioId`, `mensajePedido`, `notaPedido`) VALUES (1, 1, '2022-09-24 00:00:00', '2022-09-25 00:00:00', NULL, 1, 'NULL', 'PruebaPedido1');
INSERT INTO `DBTVFH`.`TblPedido` (`idPedido`, `estadoPedidoId`, `fechaInicioPedido`, `fechaEntregaPedido`, `fechaFinPedido`, `usuarioId`, `mensajePedido`, `notaPedido`) VALUES (2, 1, '2022-09-25 21:25:41', '2022-09-25 00:00:00', NULL, 1, '1', 'PP2');
INSERT INTO `DBTVFH`.`TblPedido` (`idPedido`, `estadoPedidoId`, `fechaInicioPedido`, `fechaEntregaPedido`, `fechaFinPedido`, `usuarioId`, `mensajePedido`, `notaPedido`) VALUES (3, 1, '2022-09-25 21:50:14', '2022-09-25 00:00:00', NULL, 2, 'NULL', 'pp3');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DBTVFH`.`TblEstadoProducto`
-- -----------------------------------------------------
START TRANSACTION;
USE `DBTVFH`;
INSERT INTO `DBTVFH`.`TblEstadoProducto` (`idEstadoProducto`, `nombreEstadoProducto`) VALUES (1, 'Activado');
INSERT INTO `DBTVFH`.`TblEstadoProducto` (`idEstadoProducto`, `nombreEstadoProducto`) VALUES (2, 'Desactivado');
INSERT INTO `DBTVFH`.`TblEstadoProducto` (`idEstadoProducto`, `nombreEstadoProducto`) VALUES (3, 'Borrador');
INSERT INTO `DBTVFH`.`TblEstadoProducto` (`idEstadoProducto`, `nombreEstadoProducto`) VALUES (4, 'Eliminado');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DBTVFH`.`TblVisibilidadProducto`
-- -----------------------------------------------------
START TRANSACTION;
USE `DBTVFH`;
INSERT INTO `DBTVFH`.`TblVisibilidadProducto` (`idVisibilidadProducto`, `nombreVisibilidadProducto`) VALUES (1, 'Público');
INSERT INTO `DBTVFH`.`TblVisibilidadProducto` (`idVisibilidadProducto`, `nombreVisibilidadProducto`) VALUES (2, 'Privado');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DBTVFH`.`TblEstadoCategoria`
-- -----------------------------------------------------
START TRANSACTION;
USE `DBTVFH`;
INSERT INTO `DBTVFH`.`TblEstadoCategoria` (`idEstadoCategoria`, `nombreEstadoCategoria`) VALUES (1, 'Activada');
INSERT INTO `DBTVFH`.`TblEstadoCategoria` (`idEstadoCategoria`, `nombreEstadoCategoria`) VALUES (2, 'Desactivada');
INSERT INTO `DBTVFH`.`TblEstadoCategoria` (`idEstadoCategoria`, `nombreEstadoCategoria`) VALUES (3, 'Eliminada');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DBTVFH`.`TblCategoria`
-- -----------------------------------------------------
START TRANSACTION;
USE `DBTVFH`;
INSERT INTO `DBTVFH`.`TblCategoria` (`idCategoria`, `estadoCategoriaId`, `padreCategoriaId`, `fechaAltaCategoria`, `fechaBajaCategoria`, `nombreCategoria`, `descripcionCategoria`, `imagenCategoria`) VALUES (1, 1, NULL, '2022-09-24 00:00:00', NULL, 'PruebaProd1', 'PruebaProd1', NULL);
INSERT INTO `DBTVFH`.`TblCategoria` (`idCategoria`, `estadoCategoriaId`, `padreCategoriaId`, `fechaAltaCategoria`, `fechaBajaCategoria`, `nombreCategoria`, `descripcionCategoria`, `imagenCategoria`) VALUES (2, 1, 1, '2022-09-25 21:53:47', NULL, 'cp2', 'cp3', NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `DBTVFH`.`TblProducto`
-- -----------------------------------------------------
START TRANSACTION;
USE `DBTVFH`;
INSERT INTO `DBTVFH`.`TblProducto` (`idProducto`, `estadoProductoId`, `visibilidadProductoId`, `fechaAltaProducto`, `fechaBajaProducto`, `nombreProducto`, `categoriaId`, `skuProducto`, `descripcionCortaProducto`, `descripcionLargaProducto`, `valorUnitarioProducto`, `imagenProducto`) VALUES (1, 1, 1, '2022-09-24 00:00:00', NULL, 'PruebaProd1', 1, '00000', 'PruebaProd1', 'PruebaProd1', 1000, NULL);
INSERT INTO `DBTVFH`.`TblProducto` (`idProducto`, `estadoProductoId`, `visibilidadProductoId`, `fechaAltaProducto`, `fechaBajaProducto`, `nombreProducto`, `categoriaId`, `skuProducto`, `descripcionCortaProducto`, `descripcionLargaProducto`, `valorUnitarioProducto`, `imagenProducto`) VALUES (2, 1, 1, '2022-09-25 21:25:41', NULL, 'pp2', 1, '00001', 'pp2', 'pp2', 100, NULL);
INSERT INTO `DBTVFH`.`TblProducto` (`idProducto`, `estadoProductoId`, `visibilidadProductoId`, `fechaAltaProducto`, `fechaBajaProducto`, `nombreProducto`, `categoriaId`, `skuProducto`, `descripcionCortaProducto`, `descripcionLargaProducto`, `valorUnitarioProducto`, `imagenProducto`) VALUES (3, 1, 2, '2022-09-25 22:11:47', NULL, 'pp3', 1, '00002', 'pp3', 'pp3', 200, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `DBTVFH`.`TblDetallePedido`
-- -----------------------------------------------------
START TRANSACTION;
USE `DBTVFH`;
INSERT INTO `DBTVFH`.`TblDetallePedido` (`idDetallePedido`, `pedidoId`, `productoId`, `cantidadProducto`, `valorTotalProducto`, `subTotalPedido`, `valorEnvioPedido`, `totalPedido`) VALUES (1, 1, 1, 2, 2000, 2000, 50, 2050);
INSERT INTO `DBTVFH`.`TblDetallePedido` (`idDetallePedido`, `pedidoId`, `productoId`, `cantidadProducto`, `valorTotalProducto`, `subTotalPedido`, `valorEnvioPedido`, `totalPedido`) VALUES (2, 2, 1, 3, 3000, 3000, 50, 3050);
INSERT INTO `DBTVFH`.`TblDetallePedido` (`idDetallePedido`, `pedidoId`, `productoId`, `cantidadProducto`, `valorTotalProducto`, `subTotalPedido`, `valorEnvioPedido`, `totalPedido`) VALUES (3, 2, 2, 1, 100, 3100, 50, 3150);
INSERT INTO `DBTVFH`.`TblDetallePedido` (`idDetallePedido`, `pedidoId`, `productoId`, `cantidadProducto`, `valorTotalProducto`, `subTotalPedido`, `valorEnvioPedido`, `totalPedido`) VALUES (4, 3, 1, 9, 9000, 9000, 100, 9100);

COMMIT;

